// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks_test

import (
	fs "io/fs"

	mock "github.com/stretchr/testify/mock"
)

// MockFileSystemHandler is an autogenerated mock type for the FileSystemHandler type
type MockFileSystemHandler struct {
	mock.Mock
}

type MockFileSystemHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFileSystemHandler) EXPECT() *MockFileSystemHandler_Expecter {
	return &MockFileSystemHandler_Expecter{mock: &_m.Mock}
}

// MkdirAll provides a mock function with given fields: path
func (_m *MockFileSystemHandler) MkdirAll(path string) error {
	ret := _m.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for MkdirAll")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(path)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFileSystemHandler_MkdirAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MkdirAll'
type MockFileSystemHandler_MkdirAll_Call struct {
	*mock.Call
}

// MkdirAll is a helper method to define mock.On call
//   - path string
func (_e *MockFileSystemHandler_Expecter) MkdirAll(path interface{}) *MockFileSystemHandler_MkdirAll_Call {
	return &MockFileSystemHandler_MkdirAll_Call{Call: _e.mock.On("MkdirAll", path)}
}

func (_c *MockFileSystemHandler_MkdirAll_Call) Run(run func(path string)) *MockFileSystemHandler_MkdirAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockFileSystemHandler_MkdirAll_Call) Return(_a0 error) *MockFileSystemHandler_MkdirAll_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFileSystemHandler_MkdirAll_Call) RunAndReturn(run func(string) error) *MockFileSystemHandler_MkdirAll_Call {
	_c.Call.Return(run)
	return _c
}

// Remove provides a mock function with given fields: name
func (_m *MockFileSystemHandler) Remove(name string) error {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFileSystemHandler_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type MockFileSystemHandler_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - name string
func (_e *MockFileSystemHandler_Expecter) Remove(name interface{}) *MockFileSystemHandler_Remove_Call {
	return &MockFileSystemHandler_Remove_Call{Call: _e.mock.On("Remove", name)}
}

func (_c *MockFileSystemHandler_Remove_Call) Run(run func(name string)) *MockFileSystemHandler_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockFileSystemHandler_Remove_Call) Return(_a0 error) *MockFileSystemHandler_Remove_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFileSystemHandler_Remove_Call) RunAndReturn(run func(string) error) *MockFileSystemHandler_Remove_Call {
	_c.Call.Return(run)
	return _c
}

// Stat provides a mock function with given fields: name
func (_m *MockFileSystemHandler) Stat(name string) (fs.FileInfo, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Stat")
	}

	var r0 fs.FileInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (fs.FileInfo, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) fs.FileInfo); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(fs.FileInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFileSystemHandler_Stat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stat'
type MockFileSystemHandler_Stat_Call struct {
	*mock.Call
}

// Stat is a helper method to define mock.On call
//   - name string
func (_e *MockFileSystemHandler_Expecter) Stat(name interface{}) *MockFileSystemHandler_Stat_Call {
	return &MockFileSystemHandler_Stat_Call{Call: _e.mock.On("Stat", name)}
}

func (_c *MockFileSystemHandler_Stat_Call) Run(run func(name string)) *MockFileSystemHandler_Stat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockFileSystemHandler_Stat_Call) Return(_a0 fs.FileInfo, _a1 error) *MockFileSystemHandler_Stat_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFileSystemHandler_Stat_Call) RunAndReturn(run func(string) (fs.FileInfo, error)) *MockFileSystemHandler_Stat_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockFileSystemHandler creates a new instance of MockFileSystemHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFileSystemHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFileSystemHandler {
	mock := &MockFileSystemHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
