// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks_test

import (
	plugin "plugin"

	mock "github.com/stretchr/testify/mock"
)

// MockSymbolLoader is an autogenerated mock type for the SymbolLoader type
type MockSymbolLoader struct {
	mock.Mock
}

type MockSymbolLoader_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSymbolLoader) EXPECT() *MockSymbolLoader_Expecter {
	return &MockSymbolLoader_Expecter{mock: &_m.Mock}
}

// Lookup provides a mock function with given fields: symName
func (_m *MockSymbolLoader) Lookup(symName string) (plugin.Symbol, error) {
	ret := _m.Called(symName)

	if len(ret) == 0 {
		panic("no return value specified for Lookup")
	}

	var r0 plugin.Symbol
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (plugin.Symbol, error)); ok {
		return rf(symName)
	}
	if rf, ok := ret.Get(0).(func(string) plugin.Symbol); ok {
		r0 = rf(symName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(plugin.Symbol)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(symName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSymbolLoader_Lookup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Lookup'
type MockSymbolLoader_Lookup_Call struct {
	*mock.Call
}

// Lookup is a helper method to define mock.On call
//   - symName string
func (_e *MockSymbolLoader_Expecter) Lookup(symName interface{}) *MockSymbolLoader_Lookup_Call {
	return &MockSymbolLoader_Lookup_Call{Call: _e.mock.On("Lookup", symName)}
}

func (_c *MockSymbolLoader_Lookup_Call) Run(run func(symName string)) *MockSymbolLoader_Lookup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockSymbolLoader_Lookup_Call) Return(_a0 plugin.Symbol, _a1 error) *MockSymbolLoader_Lookup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSymbolLoader_Lookup_Call) RunAndReturn(run func(string) (plugin.Symbol, error)) *MockSymbolLoader_Lookup_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSymbolLoader creates a new instance of MockSymbolLoader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSymbolLoader(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSymbolLoader {
	mock := &MockSymbolLoader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
