// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks_test

import mock "github.com/stretchr/testify/mock"

// MockMetadata is an autogenerated mock type for the Metadata type
type MockMetadata struct {
	mock.Mock
}

type MockMetadata_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMetadata) EXPECT() *MockMetadata_Expecter {
	return &MockMetadata_Expecter{mock: &_m.Mock}
}

// GetExpectedArgs provides a mock function with given fields:
func (_m *MockMetadata) GetExpectedArgs() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetExpectedArgs")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// MockMetadata_GetExpectedArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExpectedArgs'
type MockMetadata_GetExpectedArgs_Call struct {
	*mock.Call
}

// GetExpectedArgs is a helper method to define mock.On call
func (_e *MockMetadata_Expecter) GetExpectedArgs() *MockMetadata_GetExpectedArgs_Call {
	return &MockMetadata_GetExpectedArgs_Call{Call: _e.mock.On("GetExpectedArgs")}
}

func (_c *MockMetadata_GetExpectedArgs_Call) Run(run func()) *MockMetadata_GetExpectedArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMetadata_GetExpectedArgs_Call) Return(_a0 []string) *MockMetadata_GetExpectedArgs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMetadata_GetExpectedArgs_Call) RunAndReturn(run func() []string) *MockMetadata_GetExpectedArgs_Call {
	_c.Call.Return(run)
	return _c
}

// GetHelp provides a mock function with given fields:
func (_m *MockMetadata) GetHelp() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetHelp")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockMetadata_GetHelp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHelp'
type MockMetadata_GetHelp_Call struct {
	*mock.Call
}

// GetHelp is a helper method to define mock.On call
func (_e *MockMetadata_Expecter) GetHelp() *MockMetadata_GetHelp_Call {
	return &MockMetadata_GetHelp_Call{Call: _e.mock.On("GetHelp")}
}

func (_c *MockMetadata_GetHelp_Call) Run(run func()) *MockMetadata_GetHelp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMetadata_GetHelp_Call) Return(_a0 string) *MockMetadata_GetHelp_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMetadata_GetHelp_Call) RunAndReturn(run func() string) *MockMetadata_GetHelp_Call {
	_c.Call.Return(run)
	return _c
}

// GetName provides a mock function with given fields:
func (_m *MockMetadata) GetName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockMetadata_GetName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetName'
type MockMetadata_GetName_Call struct {
	*mock.Call
}

// GetName is a helper method to define mock.On call
func (_e *MockMetadata_Expecter) GetName() *MockMetadata_GetName_Call {
	return &MockMetadata_GetName_Call{Call: _e.mock.On("GetName")}
}

func (_c *MockMetadata_GetName_Call) Run(run func()) *MockMetadata_GetName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMetadata_GetName_Call) Return(_a0 string) *MockMetadata_GetName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMetadata_GetName_Call) RunAndReturn(run func() string) *MockMetadata_GetName_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMetadata creates a new instance of MockMetadata. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMetadata(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMetadata {
	mock := &MockMetadata{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
